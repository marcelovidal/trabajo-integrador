{
    "sourceFile": "public/app.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1622053259061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1622053267982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n     if (response.errors) {\n         updateFormErrors(response.errors);\n     } else {\n         createUserForm.reset();\n-        loadTable.sort();\n+        loadTable();\n     }\n }\n \n /**\n"
                }
            ],
            "date": 1622053259061,
            "name": "Commit-0",
            "content": "// Referencia a la tabla de contenido\nconst contentTable = document.getElementById('contentTable');\n// Referencia al template\nconst templateRow = document.getElementById('contentRow').content;\n\nconst inputName = document.getElementById('inputName');\nconst inputNameHelp = document.getElementById('inputNameHelp');\nconst inputNameFormGroup = inputNameHelp.parentElement;\nconst inputAge = document.getElementById('inputAge');\nconst inputAgeHelp = document.getElementById('inputAgeHelp');\nconst inputAgeFormGroup = inputAgeHelp.parentElement;\n\nconst createUserFormContent = document.getElementById('form-create');\nconst createUserForm = document.getElementById('createUserForm');\n\nconst updateUserFormContent = document.getElementById('form-update');\nconst updateUserForm = document.getElementById('updateUserForm');\n\nlet editingUserId = null;\n\n/**\n * Agregar Row.\n *\n * @param {*} name\n * @param {*} age\n */\nfunction addRow(name, age, id) {\n    // Clono el template en una nueva variable\n    const row = templateRow.cloneNode(true);\n\n    // Modifico el valor del nodo de texto por el ingesado por el usuario\n    row.querySelector('.txtName').innerText = name;\n    row.querySelector('.txtAge').innerText = age;\n\n    row.querySelector('.btnDelete').onclick = () => deleteUser(id);\n    row.querySelector('.btnEdit').addEventListener('click', () => updateUser(id));\n\n    row.querySelector('.row').dataset.id = id;\n\n    // Inserto en el contenido de la tabla\n    contentTable.appendChild(row);\n}\n\n/**\n * Llamado a la API.\n *\n * @param {'get'|'post'|'delete'|'put'} method\n * @param {'/users'|'/users/:id'} endpoint\n * @returns\n */\nasync function api(method, endpoint, body = undefined) {\n    if (body) {\n        body = JSON.stringify(body);\n    }\n\n    const headers = {\n        'Content-Type': 'application/json',\n    };\n\n    const token = localStorage.getItem('token');\n\n    if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    const response = await fetch(`/api${endpoint}`, {\n        method,\n        body,\n        headers,\n    });\n\n    const data = await response.json();\n\n    return data;\n}\n\n/**\n * Cargar datos de la tabla.\n */\nasync function loadTable() {\n    if (localStorage.getItem('token')) {\n        contentTable.innerHTML = '';\n        const data = await api('get', '/users');\n        data.forEach(({ name, age, id }) => addRow(name, age, id));\n    }\n}\n\n/**\n * Inicio de la APP.\n */\nasync function initApp() {\n    await loadTable();\n}\n\n/**\n * Crear usuario.\n */\nasync function createUser() {\n    const name = inputName.value;\n    const age = inputAge.value;\n\n    resetFormErrors();\n\n    const response = await api('post', '/users', {\n        name,\n        age,\n    });\n\n    if (response.errors) {\n        updateFormErrors(response.errors);\n    } else {\n        createUserForm.reset();\n        loadTable.sort();\n    }\n}\n\n/**\n * Actualizar usuario.\n */\nasync function updateUser(id) {\n    editingUserId = id;\n\n    createUserFormContent.style.display = 'none';\n    updateUserFormContent.style.display = '';\n\n    const user = await api('get', `/users/${id}`);\n\n    updateUserFormContent.querySelector('#user-id').innerText = id;\n    updateUserForm.querySelector('#inputName').value = user.name;\n    updateUserForm.querySelector('#inputAge').value = user.age;\n}\n\nasync function saveUpdateUser() {\n    const name = updateUserForm.querySelector('#inputName').value;\n    const age = updateUserForm.querySelector('#inputAge').value;\n\n    await api('put', `/users/${editingUserId}`, {\n        name,\n        age,\n    });\n\n    cancelUpdate();\n    loadTable();\n}\n\nasync function deleteUser(id) {\n    await api('delete', `/users/${id}`);\n\n    const userRow = document.querySelector(`[data-id='${id}']`);\n    userRow.remove();\n}\n\nfunction cancelUpdate() {\n    updateUserFormContent.style.display = 'none';\n    createUserFormContent.style.display = '';\n}\n\nfunction updateFormErrors(errors) {\n    errors.forEach((error) => {\n        switch (error.field) {\n            case 'name':\n                inputNameHelp.innerText = error.msg;\n                inputNameHelp.classList.remove('hidden');\n                inputNameFormGroup.classList.add('has-error');\n                break;\n            case 'age':\n                inputAgeHelp.innerText = error.msg;\n                inputAgeHelp.classList.remove('hidden');\n                inputAgeFormGroup.classList.add('has-error');\n                break;\n        }\n    });\n}\n\nfunction resetFormErrors() {\n    inputNameHelp.classList.add('hidden');\n    inputNameFormGroup.classList.remove('has-error');\n    inputAgeHelp.classList.add('hidden');\n    inputAgeFormGroup.classList.remove('has-error');\n}"
        }
    ]
}