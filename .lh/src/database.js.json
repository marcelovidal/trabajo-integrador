{
    "sourceFile": "src/database.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1622025920765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1622025935506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+const mysql = require('mysql2/promise');\n const { DB_CONFIG } = require('./config');\n \n let connection;\n \n"
                },
                {
                    "date": 1622058640808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,15 @@\n     if (userData.username && !userData.username.trim()) {\n         throw new Error(`La propiedad 'username' no puede ser vacía`);\n     }\n \n+    //    const userName = user.name.toLowerCase().trim();\n+\n+    // if (DB.some((item) => item.name.toLowerCase().trim() === userName)) {\n+    //   res.status(409).json({\n+    //     message: '`name` debe ser único',\n+    //   });\n+\n     if (userData.password && !userData.password.trim()) {\n         throw new Error(`La propiedad 'password' no puede ser vacía`);\n     }\n \n"
                },
                {
                    "date": 1622196368542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,15 +54,8 @@\n     if (userData.username && !userData.username.trim()) {\n         throw new Error(`La propiedad 'username' no puede ser vacía`);\n     }\n \n-    //    const userName = user.name.toLowerCase().trim();\n-\n-    // if (DB.some((item) => item.name.toLowerCase().trim() === userName)) {\n-    //   res.status(409).json({\n-    //     message: '`name` debe ser único',\n-    //   });\n-\n     if (userData.password && !userData.password.trim()) {\n         throw new Error(`La propiedad 'password' no puede ser vacía`);\n     }\n \n"
                },
                {
                    "date": 1622385417325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,11 @@\n     }\n }\n \n module.exports = {\n+    get connection() {\n+        return connection;\n+    }\n     async initDB() {\n         connection = await mysql.createConnection(DB_CONFIG);\n     },\n     /**\n"
                },
                {
                    "date": 1622385442916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n \n module.exports = {\n     get connection() {\n         return connection;\n-    }\n+    },\n     async initDB() {\n         connection = await mysql.createConnection(DB_CONFIG);\n     },\n     /**\n"
                }
            ],
            "date": 1622025920765,
            "name": "Commit-0",
            "content": "const { DB_CONFIG } = require('./config');\n\nlet connection;\n\n/**\n * Error específico para recursos inexistentes en la DB.\n */\nclass ResourceNotFoundError extends Error {\n    /**\n     * @param {string} message\n     * @param {string} resource\n     * @param {number} id\n     */\n    constructor(message, resource, id) {\n        super(message);\n        this.resource = resource;\n        this.id = id;\n    }\n}\n\n/**\n * @typedef {Object} TUser\n * @property {string} username Usuario.\n * @property {string} password Password.\n * @property {string} name Nombre.\n * @property {number} age Edad.\n *\n * @typedef {TUser & {\n *    id: number,\n *  }} TUserDB\n *\n * @typedef {Object} TFilterQuery\n * @property {string|undefined} username Usuario.\n * @property {string|undefined} password Password.\n * @property {string|undefined} name Nombre.\n * @property {number|undefined} age Edad.\n */\n\n/**\n * Validar datos del usuario.\n *\n * @param {TUser} userData\n */\nfunction validateUser(userData) {\n    if (!userData) {\n        throw new Error(`No se ha definidio el usuario`);\n    }\n\n    if (!userData.name || !userData.name.trim()) {\n        throw new Error(`La propiedad 'name' es requerida`);\n    }\n\n    if (userData.username && !userData.username.trim()) {\n        throw new Error(`La propiedad 'username' no puede ser vacía`);\n    }\n\n    if (userData.password && !userData.password.trim()) {\n        throw new Error(`La propiedad 'password' no puede ser vacía`);\n    }\n\n    if (!userData.age ||\n        isNaN(userData.age) ||\n        userData.age < 18 ||\n        userData.age > 200\n    ) {\n        throw new Error(`La propiedad 'age' es inválida`);\n    }\n}\n\nmodule.exports = {\n    async initDB() {\n        connection = await mysql.createConnection(DB_CONFIG);\n    },\n    /**\n     * Listar.\n     *\n     * @param {string|undefined} filterName Filtrar por nombre.\n     * @returns {TUserDB[]}\n     */\n    async list(filterName) {\n        const [users] = await connection.execute('SELECT * FROM users');\n\n        // if (filterName && filterName.trim()) {\n        //   filterName = filterName.trim().toLowerCase();\n\n        //   users = users.filter((user) =>\n        //     user.name.toLowerCase().includes(filterName)\n        //   );\n        // }\n\n        return users;\n    },\n\n    /**\n     * Buscar un usuario por ID.\n     *\n     * @param {number} userId ID de Usuario.\n     * @returns {TUserDB | undefined}\n     */\n    async find(userId) {\n        const [users] = await connection.execute(\n            'SELECT * FROM users WHERE id = ?', [userId]\n        );\n\n        if (users.length > 0) {\n            return users[0];\n        } else {\n            return undefined;\n        }\n    },\n\n    /**\n     * Buscar usuarios.\n     *\n     * @param {TFilterQuery} query Query de búsqueda.\n     * @returns {TUserDB[]}\n     */\n    async search(query) {\n        const paramsString = Object.keys(query) // [\"username\", \"pass\"]\n            .map((elem) => `${elem} = ?`) // [\"username = ?\", \"pass = ?\"]\n            .join(' AND '); // \"username = ? AND pass = ?\"\n\n        const [users] = await connection.execute(\n            `SELECT * FROM users WHERE ${paramsString}`,\n            Object.values(query)\n        );\n\n        return users;\n    },\n\n    /**\n     * Agregar un usuariro.\n     *\n     * @param {TUser} userData\n     */\n    async add(userData) {\n        validateUser(userData);\n        const { username, password, name, age } = userData;\n        const [result] = await connection.execute(\n            'INSERT INTO users(username, password, name, age) VALUES(?, ?, ?, ?)', [username, password, name, age]\n        );\n\n        return await this.find(result.insertId);\n    },\n\n    /**\n     * Actualizar un usuario.\n     *\n     * @param {number} userId\n     * @param {TUser & {\n     *    username?: string,\n     *    password?: string,\n     *  }} newUserData\n     */\n    async update(userId, newUserData) {\n        const user = await this.find(userId);\n\n        if (!user) {\n            throw new ResourceNotFoundError(\n                `No existe un usuario con ID \"${userId}\"`,\n                'user',\n                userId\n            );\n        }\n\n        validateUser(newUserData);\n\n        // Actualiza datos\n\n        if (newUserData.username) {\n            user.username = newUserData.username;\n        }\n\n        if (newUserData.password) {\n            user.password = newUserData.password;\n        }\n\n        user.name = newUserData.name;\n        user.age = newUserData.age;\n\n        await connection.execute(\n            'UPDATE users SET username = ?, password = ?, name = ?, age = ? WHERE id = ?', [user.username, user.password, user.name, user.age, user.id]\n        );\n\n        return user;\n    },\n\n    /**\n     * Elimina un usuario.\n     *\n     * @param {number} userId\n     */\n    async remove(userId) {\n        const user = await this.find(userId);\n\n        if (!user) {\n            throw new ResourceNotFoundError(\n                `No existe un usuario con ID \"${userId}\"`,\n                'user',\n                userId\n            );\n        }\n\n        await connection.execute('DELETE FROM users WHERE id = ?', [user.id]);\n    },\n\n    ResourceNotFoundError,\n};"
        }
    ]
}